{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/sensor/sensor.component.css","webpack:///./src/app/sensor/sensor.component.html","webpack:///./src/app/sensor/sensor.component.ts","webpack:///./src/app/sensorr.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,sBAAsB,cAAc,6CAA6C,kBAAkB,KAAK,6CAA6C,2W;;;;;;;;;;;ACArJ,mJAAmJ,SAAS,0C;;;;;;;;;;;;;;;;;ACAlH;AAO1C;IALA;QAME,UAAK,GAAG,8BAA8B,CAAC;IACzC,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,yFAAmC;;SAEpC,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AAEM;AACa;AACJ;AACL;AAcnD;IAAA;IAAyB,CAAC;IAAb,SAAS;QAZrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,wEAAe;aAChB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,qEAAgB;aACjB;YACD,SAAS,EAAE,CAAC,+DAAc,CAAC;YAC3B,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;ACpBtB,+DAA+D,2I;;;;;;;;;;;ACA/D,uFAAuF,WAAW,m7BAAm7B,uBAAuB,yDAAyD,sBAAsB,yDAAyD,sBAAsB,yDAAyD,mBAAmB,mDAAmD,gBAAgB,yDAAyD,mBAAmB,yDAAyD,cAAc,yDAAyD,cAAc,wDAAwD,kBAAkB,4W;;;;;;;;;;;;;;;;;;ACA3kD;AACE;AASpD;IAKE,yBAAoB,aAA6B;QAA7B,kBAAa,GAAb,aAAa,CAAgB;QAJjD,cAAS,GAAW,gCAAgC,CAAC;QAErD,YAAO,GAAU,EAAE,CAAC;IAEiC,CAAC;IAEtD,kCAAQ,GAAR;QAAA,iBAIC;QAHC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC,SAAS,CACvC,iBAAO,IAAI,YAAI,CAAC,OAAO,GAAG,OAAO,EAAtB,CAAsB,CAClC,CAAC;IACJ,CAAC;IAXU,eAAe;QAN3B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,sGAAsC;;SAEvC,CAAC;+EAOmC,+DAAc;OALtC,eAAe,CAY3B;IAAD,sBAAC;CAAA;AAZ2B;;;;;;;;;;;;;;;;;;;ACVe;AACO;AAqBlD;IAGE,wBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAD5B,cAAS,GAAG,qEAAqE,CAAC;IAClD,CAAC;IAEzC,mCAAU,GAAV;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAY,IAAI,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;IAPU,cAAc;QAH1B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAI0B,+DAAU;OAHzB,cAAc,CAQzB;IAAD,qBAAC;CAAA;AARyB;;;;;;;;;;;;;ACtB3B;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"h1 { color:  #369;font-family:  Arial,  Helvetica,  sans-serif; font-size:  250%;    }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsS0FBSyxZQUFZLENBQUMsNENBQTRDLEVBQUUsZ0JBQWdCLEtBQUsiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImgxIHsgY29sb3I6ICAjMzY5O2ZvbnQtZmFtaWx5OiAgQXJpYWwsICBIZWx2ZXRpY2EsICBzYW5zLXNlcmlmOyBmb250LXNpemU6ICAyNTAlOyAgICB9Il19 */\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to {{ title }}!\\n  </h1>\\n  <sm-sensor></sm-sensor>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'My First Angular application';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { SensorComponent } from './sensor/sensor.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SensorrService } from './sensorr.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SensorComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [SensorrService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NlbnNvci9zZW5zb3IuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"card\\\"> \\n    <div class=\\\"card-header\\\">    \\n       {{pageTitle}}   \\n       </div>    \\n         <div class=\\\"card-body\\\">     \\n            <div class='table-responsive'>       \\n                  <table class='table' *ngIf='sensors && sensors.length'>            \\n                      <thead>\\n                      <tr> \\n                        <th>Location</th>   \\n                        <th>Temperature</th>\\n                        <th>Air pressure</th> \\n                        <th>Humidity</th> \\n                        <th>Light</th>   \\n                        <th>Altitude</th>\\n                        <th>Mic</th>\\n                        <th>Gas</th>\\n                        <th>Hub Name</th>\\n                      </tr>      \\n                     </thead>\\n                     <tbody>           \\n                                      <!-- Leave empty for now -->\\n                                    <tr *ngFor='let sensor of sensors'>   \\n                                      <td>{{ sensor.motelocation }}</td>      \\n                                      <td>{{ sensor.temperature }}</td>      \\n                                      <td>{{ sensor.airpressure }}</td>      \\n                                      <td>{{ sensor.humidity }}</td>\\n                                      <td>{{ sensor.light }}</td>      \\n                                      <td>{{ sensor.altitude }}</td>      \\n                                      <td>{{ sensor.mic }}</td>      \\n                                      <td>{{ sensor.gas }}</td>     \\n                                      <td>{{ sensor.hubname }}</td>               \\n                                    </tr>             \\n                      </tbody>            \\n            </table>  \\n       </div>   \\n     </div>     \\n   </div>\\n   <div>\\n    <h2><a  target=\\\"_blank\\\"  rel=\\\"noopener\\\"  href=\\\"https://personal-sites.deakin.edu.au/~nmehare/ass2/code/view.php\\\">Click to Go Back</a></h2>\\n    </div>\"","import { Component, OnInit } from '@angular/core';\nimport { SensorrService } from '../sensorr.service';\n\n\n@Component({\n  selector: 'sm-sensor',\n  templateUrl: './sensor.component.html',\n  styleUrls: ['./sensor.component.css']\n})\n\nexport class SensorComponent implements OnInit {\n  pageTitle: String = 'Sensor Environmental Data list';\n\n  sensors: any[] = [];\n\n  constructor(private sensorService: SensorrService) { }\n\n  ngOnInit(): void {\n    this.sensorService.getsensors().subscribe(\n      sensors => this.sensors = sensors\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n\nexport interface ISensor {\n  motelocation: string;\n  temperature: string;\n  airpressure: string;\n  humidity: string;\n  light: string;\n  altitude: string;\n  mic: string;\n  gas: string;\n  xbeeid: string;\n  moteid: string;\n  hubname: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SensorrService {\n\n  private sensorUrl = 'https://personal-sites.deakin.edu.au/~nmehare/ass2/code/sensor.json';\n  constructor(private http: HttpClient) { }\n\n  getsensors(): Observable<ISensor[]> {\n    return this.http.get<ISensor[]>(this.sensorUrl);\n  }\n }","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}